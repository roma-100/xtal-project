{"ast":null,"code":"var _jsxFileName = \"/home/roman/wwwl/30_react/react_kabzda2/src/components/Dialogs/DialogsContainer.jsx\";\nimport React from \"react\";\nimport Dialogs from \"./Dialogs\";\nimport { sendMessageCreator, updateNewMessageBodyCreator } from \"../../redux/reducer-dialogs\";\nimport { connect } from 'react-redux';\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DialogsContainer extends React.Component {\n  componentDidMount() {\n    console.log('DialogsContainer props: ' + this.props.dialogPages.dialogs[0].name);\n  }\n\n  render() {\n    //debugger\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Dialogs, { ...this.props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this);\n  }\n\n} // Let's make 2 wrap connect\n\n/* const mapStateToPropsForRedirect = (state) => ({\n  isAuth: state.auth.isAuth\n})\n\nconst AuthRedirectComponent = connect(mapStateToPropsForRedirect)(AuthRedirectComponentBurger)\n\nconst mapStateToProps = (state) => ({\n  profile: state.profileReducer.profile\n}) */\n\n\nconst authDialogsContainerBurger = withAuthRedirect(DialogsContainer);\n\nconst mapStateToPropsForRedirect = state => {\n  return {\n    isAuth: state.auth.isAuth\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    dialogPages: state.dialogsReducer\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    sendMessageCreator: () => {\n      dispatch(sendMessageCreator());\n    },\n    updateNewMessageBodyCreator: newMessageTmp => {\n      dispatch(updateNewMessageBodyCreator(newMessageTmp));\n    }\n  };\n};\n\nconst connectDialogsContainer = connect(mapStateToProps, mapDispatchToProps)(authBurgerDialogsContainer);\nexport default connectDialogsContainer;","map":{"version":3,"names":["React","Dialogs","sendMessageCreator","updateNewMessageBodyCreator","connect","withAuthRedirect","DialogsContainer","Component","componentDidMount","console","log","props","dialogPages","dialogs","name","render","authDialogsContainerBurger","mapStateToPropsForRedirect","state","isAuth","auth","mapStateToProps","dialogsReducer","mapDispatchToProps","dispatch","newMessageTmp","connectDialogsContainer","authBurgerDialogsContainer"],"sources":["/home/roman/wwwl/30_react/react_kabzda2/src/components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["import React from \"react\";\nimport Dialogs from \"./Dialogs\";\nimport {\n  sendMessageCreator,\n  updateNewMessageBodyCreator,\n} from \"../../redux/reducer-dialogs\";\nimport { connect } from 'react-redux'\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\n\n\nclass DialogsContainer extends React.Component {\n  componentDidMount() {\n    console.log ('DialogsContainer props: ' + this.props.dialogPages.dialogs[0].name)\n  }\n  render() {\n    \n    //debugger\n    return (\n      <div>\n        <Dialogs {...this.props} \n            />\n    </div>      \n    );\n  }\n}\n\n// Let's make 2 wrap connect\n/* const mapStateToPropsForRedirect = (state) => ({\n  isAuth: state.auth.isAuth\n})\n\nconst AuthRedirectComponent = connect(mapStateToPropsForRedirect)(AuthRedirectComponentBurger)\n\nconst mapStateToProps = (state) => ({\n  profile: state.profileReducer.profile\n}) */\n\nconst authDialogsContainerBurger = withAuthRedirect(DialogsContainer)\nconst mapStateToPropsForRedirect = (state) => {\n  return {\n    isAuth: state.auth.isAuth\n  }\n}\n\n\n\nconst mapStateToProps = (state) => {\n  return {\n    dialogPages: state.dialogsReducer,\n  }\n}\n\nlet mapDispatchToProps = (dispatch) => {  \n  return {\n    sendMessageCreator: () => {\n      dispatch(sendMessageCreator()) \n    },\n    updateNewMessageBodyCreator: (newMessageTmp) => {\n      dispatch(updateNewMessageBodyCreator(newMessageTmp))\n    }\n  }\n}\n\n\nconst connectDialogsContainer = connect(mapStateToProps, mapDispatchToProps)(authBurgerDialogsContainer);\n\n\nexport default connectDialogsContainer;"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SACEC,kBADF,EAEEC,2BAFF,QAGO,6BAHP;AAIA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,QAAiC,4BAAjC;;;AAGA,MAAMC,gBAAN,SAA+BN,KAAK,CAACO,SAArC,CAA+C;EAC7CC,iBAAiB,GAAG;IAClBC,OAAO,CAACC,GAAR,CAAa,6BAA6B,KAAKC,KAAL,CAAWC,WAAX,CAAuBC,OAAvB,CAA+B,CAA/B,EAAkCC,IAA5E;EACD;;EACDC,MAAM,GAAG;IAEP;IACA,oBACE;MAAA,uBACE,QAAC,OAAD,OAAa,KAAKJ;MAAlB;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF;EAMD;;AAb4C,C,CAgB/C;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMK,0BAA0B,GAAGX,gBAAgB,CAACC,gBAAD,CAAnD;;AACA,MAAMW,0BAA0B,GAAIC,KAAD,IAAW;EAC5C,OAAO;IACLC,MAAM,EAAED,KAAK,CAACE,IAAN,CAAWD;EADd,CAAP;AAGD,CAJD;;AAQA,MAAME,eAAe,GAAIH,KAAD,IAAW;EACjC,OAAO;IACLN,WAAW,EAAEM,KAAK,CAACI;EADd,CAAP;AAGD,CAJD;;AAMA,IAAIC,kBAAkB,GAAIC,QAAD,IAAc;EACrC,OAAO;IACLtB,kBAAkB,EAAE,MAAM;MACxBsB,QAAQ,CAACtB,kBAAkB,EAAnB,CAAR;IACD,CAHI;IAILC,2BAA2B,EAAGsB,aAAD,IAAmB;MAC9CD,QAAQ,CAACrB,2BAA2B,CAACsB,aAAD,CAA5B,CAAR;IACD;EANI,CAAP;AAQD,CATD;;AAYA,MAAMC,uBAAuB,GAAGtB,OAAO,CAACiB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CI,0BAA7C,CAAhC;AAGA,eAAeD,uBAAf"},"metadata":{},"sourceType":"module"}