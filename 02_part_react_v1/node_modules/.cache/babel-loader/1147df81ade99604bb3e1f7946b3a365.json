{"ast":null,"code":"import { profileAPI } from '../api/api';\nconst ADD_POST = 'ADD-POST';\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\nconst SET_USER_PROFILE = 'SET-USER-PROFILE';\nconst SET_STATUS = 'SET-STATUS';\nconst initialState = {\n  posts: [{\n    id: 1,\n    message: \"This is my first post.\",\n    likesCount: 12\n  }, {\n    id: 1,\n    message: \"Second post. Hello everybody\",\n    likesCount: 11\n  }],\n  newPostText: \"it-kamasutra\",\n  profile: null,\n  status: 'initial status'\n};\n\nconst profileReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  //debugger\n  //********* POST: ADD_POST **** ****/\n  if (action.type === ADD_POST) {\n    const stateCopy = { ...state,\n      newPostText: \"\",\n      posts: [...state.posts, {\n        id: 3,\n        message: state.newPostText,\n        likesCount: 0\n      }]\n    };\n    return stateCopy;\n  } //*********POST: UPDATE_NEW_POST_TEXT ********/\n\n\n  if (action.type === UPDATE_NEW_POST_TEXT) {\n    return { ...state,\n      newPostText: action.newText\n    };\n  }\n\n  if (action.type === SET_USER_PROFILE) {\n    //debugger\n    return { ...state,\n      profile: action.profile\n    };\n  }\n\n  if (action.type === SET_STATUS) {\n    //debugger\n    return { ...state,\n      status: action.status\n    };\n  }\n\n  return state;\n};\n\nexport const addPostActionCreator = () => ({\n  type: ADD_POST\n});\nexport const setUserProfile = profile => ({\n  type: SET_USER_PROFILE,\n  profile\n});\nexport const setStatus = status => ({\n  type: SET_STATUS,\n  status\n});\nexport const updateNewPostTextActionCreator = text => ({\n  type: UPDATE_NEW_POST_TEXT,\n  newText: text\n});\nexport const getUserProfileThunk = userId => {\n  //console.log('hello userId: ' + userId)\n  return dispatch => {\n    profileAPI.getProfile(userId).then(data => {\n      dispatch(setUserProfile(data));\n    });\n  };\n};\nexport const getStatusThunk = userId => {\n  //console.log('hello userId: ' + userId)\n  return dispatch => {\n    profileAPI.getStatus(userId).then(data => {\n      dispatch(setStatus(data));\n    });\n  };\n};\nexport const updateStatusThunk = status => {\n  console.log('Hello 11');\n  return dispatch => {\n    profileAPI.updateStatus(status).then(data => {\n      data.resultCode === 0 && dispatch(setStatus(status));\n    });\n  };\n};\nexport default profileReducer;","map":{"version":3,"names":["profileAPI","ADD_POST","UPDATE_NEW_POST_TEXT","SET_USER_PROFILE","SET_STATUS","initialState","posts","id","message","likesCount","newPostText","profile","status","profileReducer","state","action","type","stateCopy","newText","addPostActionCreator","setUserProfile","setStatus","updateNewPostTextActionCreator","text","getUserProfileThunk","userId","dispatch","getProfile","then","data","getStatusThunk","getStatus","updateStatusThunk","console","log","updateStatus","resultCode"],"sources":["/home/roman/wwwl/30_react/react_kabzda2/src/redux/reducer-profile.js"],"sourcesContent":["import {profileAPI} from '../api/api'\n\nconst ADD_POST = 'ADD-POST'\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT'\nconst SET_USER_PROFILE = 'SET-USER-PROFILE'\nconst SET_STATUS = 'SET-STATUS'\n\nconst initialState = {\n  posts: [\n    { id: 1, message: \"This is my first post.\", likesCount: 12 },\n    { id: 1, message: \"Second post. Hello everybody\", likesCount: 11 },\n  ],\n  newPostText: \"it-kamasutra\",\n  profile: null,\n  status: 'initial status'\n}\n\nconst profileReducer = (state=initialState, action) => {\n    //debugger\n    //********* POST: ADD_POST **** ****/\n    if (action.type === ADD_POST) {\n      const stateCopy = {\n        ...state,\n        newPostText: \"\",\n        posts: [\n          ...state.posts,\n          {\n            id: 3,\n            message: state.newPostText,\n            likesCount: 0,\n          },\n        ],\n      };\n      return stateCopy;\n    }\n      //*********POST: UPDATE_NEW_POST_TEXT ********/\n      if (action.type === UPDATE_NEW_POST_TEXT) {\n        return (\n          {...state, \n          newPostText: action.newText}\n        )\n      }\n      if (action.type === SET_USER_PROFILE) {\n        //debugger\n        return (\n          {...state, \n          profile: action.profile}\n        )\n      }\n      if (action.type === SET_STATUS) {\n        //debugger\n        return (\n          {...state, \n          status: action.status}\n        )\n      }      \n    return state\n}\n\n\nexport const addPostActionCreator = () => ({type: ADD_POST});\nexport const setUserProfile = (profile) => ({type: SET_USER_PROFILE, profile})\nexport const setStatus = (status) => ({type: SET_STATUS, status})\n\nexport const updateNewPostTextActionCreator = text => (\n  {type: UPDATE_NEW_POST_TEXT,\n    newText: text\n  }\n);\n\nexport const getUserProfileThunk = (userId) => {\n  //console.log('hello userId: ' + userId)\n  return (dispatch) => {\n    profileAPI.getProfile(userId)\n    .then (data => {\n      dispatch(setUserProfile(data));\n    })\n  }\n}\n\nexport const getStatusThunk = (userId) => {\n  //console.log('hello userId: ' + userId)\n  return (dispatch) => {\n    profileAPI.getStatus(userId)\n    .then (data => {\n      dispatch(setStatus(data));\n    })\n  }\n}\n\nexport const updateStatusThunk = (status) => {\n  console.log('Hello 11')\n  return (dispatch) => {\n    profileAPI.updateStatus(status)\n    .then (data => {\n      data.resultCode ===0 && dispatch(setStatus(status));\n    })\n  }\n}\n\nexport default profileReducer"],"mappings":"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"},"metadata":{},"sourceType":"module"}