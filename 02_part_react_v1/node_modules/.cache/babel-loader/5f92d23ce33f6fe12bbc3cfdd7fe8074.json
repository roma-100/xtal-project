{"ast":null,"code":"import React from \"react\";\nimport MyPosts from './MyPosts';\nimport { addPostActionCreator, updateNewPostTextActionCreator } from '../../../redux/reducer-profile'; //import StoreContext from '../../../StoreContext'\n\nimport { connect } from 'react-redux';\n/* const MyPostsContainer = () => {\n  return (\n    <StoreContext.Consumer> \n    {\n      (store) => {\n        const state = store.getState().profileReducer\n\n        const onAddPost = () => {\n          store.dispatch(addPostActionCreator())\n        };\n      \n        const textareaOnChange = (text) => {\n          const action = updateNewPostTextActionCreator(text)\n          store.dispatch(action)\n        }\n        return (\n      <MyPosts \n        updateNewPostText={textareaOnChange} \n        addPost={onAddPost} \n        posts={state.posts}\n        newPostText={state.newPostText}\n        />\n        )}\n    }\n    </StoreContext.Consumer>    \n  \n    )\n}; */\n// Возвращаем только те данные, которые нужны пользователям.\n\nconst mapStateToProps = state => {\n  //console.log('hello!')\n  return {\n    posts: state.profileReducer.posts,\n    newPostText: state.profileReducer.newPostText\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addPost: newPost => {\n      dispatch(addPostActionCreator());\n    },\n    updateNewPostText: textareaOnChange => {\n      dispatch(updateNewPostTextActionCreator(textareaOnChange));\n    }\n  };\n};\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts); //debugger\n\nexport default MyPostsContainer;","map":{"version":3,"names":["React","MyPosts","addPostActionCreator","updateNewPostTextActionCreator","connect","mapStateToProps","state","posts","profileReducer","newPostText","mapDispatchToProps","dispatch","addPost","newPost","updateNewPostText","textareaOnChange","MyPostsContainer"],"sources":["/home/roman/wwwl/30_react/react_kabzda2/src/components/Profile/MyPosts/MyPostsContainer.jsx"],"sourcesContent":["import React from \"react\";\nimport MyPosts from './MyPosts'\nimport { addPostActionCreator, updateNewPostTextActionCreator } from '../../../redux/reducer-profile'\n//import StoreContext from '../../../StoreContext'\nimport { connect } from 'react-redux'\n\n\n/* const MyPostsContainer = () => {\n  return (\n    <StoreContext.Consumer> \n    {\n      (store) => {\n        const state = store.getState().profileReducer\n\n        const onAddPost = () => {\n          store.dispatch(addPostActionCreator())\n        };\n      \n        const textareaOnChange = (text) => {\n          const action = updateNewPostTextActionCreator(text)\n          store.dispatch(action)\n        }\n        return (\n      <MyPosts \n        updateNewPostText={textareaOnChange} \n        addPost={onAddPost} \n        posts={state.posts}\n        newPostText={state.newPostText}\n        />\n        )}\n    }\n    </StoreContext.Consumer>    \n  \n    )\n}; */\n// Возвращаем только те данные, которые нужны пользователям.\nconst mapStateToProps = (state) => {\n  //console.log('hello!')\n  return {\n    posts: state.profileReducer.posts,\n    newPostText: state.profileReducer.newPostText\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {  \n  return {\n    addPost: (newPost) => {\n      dispatch(addPostActionCreator())\n    },\n    updateNewPostText: (textareaOnChange) => {\n      dispatch(updateNewPostTextActionCreator(textareaOnChange))\n    }\n  }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n//debugger\nexport default MyPostsContainer;\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,oBAAT,EAA+BC,8BAA/B,QAAqE,gCAArE,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,eAAe,GAAIC,KAAD,IAAW;EACjC;EACA,OAAO;IACLC,KAAK,EAAED,KAAK,CAACE,cAAN,CAAqBD,KADvB;IAELE,WAAW,EAAEH,KAAK,CAACE,cAAN,CAAqBC;EAF7B,CAAP;AAID,CAND;;AAQA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;EACvC,OAAO;IACLC,OAAO,EAAGC,OAAD,IAAa;MACpBF,QAAQ,CAACT,oBAAoB,EAArB,CAAR;IACD,CAHI;IAILY,iBAAiB,EAAGC,gBAAD,IAAsB;MACvCJ,QAAQ,CAACR,8BAA8B,CAACY,gBAAD,CAA/B,CAAR;IACD;EANI,CAAP;AAQD,CATD;;AAWA,MAAMC,gBAAgB,GAAGZ,OAAO,CAACC,eAAD,EAAkBK,kBAAlB,CAAP,CAA6CT,OAA7C,CAAzB,C,CACA;;AACA,eAAee,gBAAf"},"metadata":{},"sourceType":"module"}